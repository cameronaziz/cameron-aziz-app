{
  "version": 3,
  "sources": ["../../../app/components/button/index.tsx", "../../../app/components/button/getClassName.ts"],
  "sourcesContent": ["import { FC, Fragment, PropsWithChildren, VFC } from 'react';\nimport getClassName from './getClassName';\nimport type { ButtonProps, ButtonWithLabelProps } from './types';\n\ntype ButtonType = FC<ButtonProps> | VFC<ButtonWithLabelProps>;\n\nconst isLabelProp = (props: PropsWithChildren<ButtonProps> | ButtonWithLabelProps): props is ButtonWithLabelProps =>\n  typeof props === 'object' && 'label' in props;\n\nconst Button: ButtonType = (props: PropsWithChildren<ButtonProps> | ButtonWithLabelProps) => {\n  const { icon, onClick } = props;\n  const className = getClassName(props);\n  const child = isLabelProp(props) ? props.label : props.children;\n\n  return (\n    <button\n      onClick={onClick}\n      type=\"button\"\n      className={`${className}w-auto me-1 mb-0`}\n    >\n      {icon ?\n        <div className=\"d-flex align-items-center\">\n          <i className={`ni ni-${icon} me-2`} aria-hidden=\"true\"></i>\n          {child}\n        </div>\n        :\n        <Fragment>\n          {child}\n        </Fragment>\n      }\n    </button>\n  );\n};\n\nexport default Button;\n", "import type { ButtonProps } from './types';\n\nconst getBackgroundColor = (props: ButtonProps): string => {\n  const { color, isGradient, isOutline } = props;\n  const buttonColor = color || 'primary';\n\n  if (isOutline) {\n    return `btn-outline-${buttonColor} `;\n  }\n\n  return `${isGradient ? 'bg-gradient' : 'btn'}-${buttonColor} `;\n};\n\nconst getSize = (props: ButtonProps): string => {\n  const { size } = props;\n  const buttonSize = size || 'md';\n  switch (buttonSize) {\n    case 'sm': return 'btn-sm ';\n    case 'lg': return 'btn-lg ';\n    default: return '';\n  }\n};\n\nconst getClassName = (props: ButtonProps): string => {\n  const backgroundColor = getBackgroundColor(props);\n  const size = getSize(props);\n  const icon = props.icon ? 'btn-icon ' : '';\n  const round = props.isRound ? 'btn-round ' : '';\n  const className = `btn ${backgroundColor}${size}${round}${icon}`;\n  return className;\n};\n\nexport default getClassName;\n"],
  "mappings": ";;;;;;;;AAAA;AAAA,mBAAqD;;;ACArD;AAEA,IAAM,qBAAqB,CAAC,UAA+B;AACzD,QAAM,EAAE,OAAO,YAAY,cAAc;AACzC,QAAM,cAAc,SAAS;AAE7B,MAAI,WAAW;AACb,WAAO,eAAe;AAAA;AAGxB,SAAO,GAAG,aAAa,gBAAgB,SAAS;AAAA;AAGlD,IAAM,UAAU,CAAC,UAA+B;AAC9C,QAAM,EAAE,SAAS;AACjB,QAAM,aAAa,QAAQ;AAC3B,UAAQ;AAAA,SACD;AAAM,aAAO;AAAA,SACb;AAAM,aAAO;AAAA;AACT,aAAO;AAAA;AAAA;AAIpB,IAAM,eAAe,CAAC,UAA+B;AACnD,QAAM,kBAAkB,mBAAmB;AAC3C,QAAM,OAAO,QAAQ;AACrB,QAAM,OAAO,MAAM,OAAO,cAAc;AACxC,QAAM,QAAQ,MAAM,UAAU,eAAe;AAC7C,QAAM,YAAY,OAAO,kBAAkB,OAAO,QAAQ;AAC1D,SAAO;AAAA;AAGT,IAAO,uBAAQ;;;AD1Bf,IAAM,cAAc,CAAC,UACnB,OAAO,UAAU,YAAY,WAAW;AAE1C,IAAM,SAAqB,CAAC,UAAiE;AAC3F,QAAM,EAAE,MAAM,YAAY;AAC1B,QAAM,YAAY,qBAAa;AAC/B,QAAM,QAAQ,YAAY,SAAS,MAAM,QAAQ,MAAM;AAEvD,SACE,oCAAC,UAAD;AAAA,IACE;AAAA,IACA,MAAK;AAAA,IACL,WAAW,GAAG;AAAA,KAEb,OACC,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,KAAD;AAAA,IAAG,WAAW,SAAS;AAAA,IAAa,eAAY;AAAA,MAC/C,SAGH,oCAAC,uBAAD,MACG;AAAA;AAOX,IAAO,iBAAQ;",
  "names": []
}
